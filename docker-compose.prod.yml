version: '3.8'

services:
  # PostgreSQL Database with pgvector (Production)
  postgres:
    image: pgvector/pgvector:pg15
    container_name: chainguard-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chainguard-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis for caching and queues (Production)
  redis:
    image: redis:7-alpine
    container_name: chainguard-redis-prod
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chainguard-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # FastAPI Backend (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: chainguard-backend-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./uploads:/app/uploads:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chainguard-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Celery Worker for background tasks (Production)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: chainguard-celery-worker-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chainguard-network
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery Beat for scheduled tasks (Production)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: chainguard-celery-beat-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chainguard-network
    command: celery -A app.core.celery beat --loglevel=info
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chainguard-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - chainguard-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Security Tools Containers (Production)
  slither:
    build:
      context: ./ai/security_tools/slither
      dockerfile: Dockerfile.prod
    container_name: chainguard-slither-prod
    environment:
      - MAX_EXECUTION_TIME=300
      - MAX_MEMORY=512m
    volumes:
      - ./uploads:/workspace:ro
    networks:
      - chainguard-network
    profiles:
      - security-tools
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  mythril:
    build:
      context: ./ai/security_tools/mythril
      dockerfile: Dockerfile.prod
    container_name: chainguard-mythril-prod
    environment:
      - MAX_EXECUTION_TIME=600
      - MAX_MEMORY=1g
    volumes:
      - ./uploads:/workspace:ro
    networks:
      - chainguard-network
    profiles:
      - security-tools
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  echidna:
    build:
      context: ./ai/security_tools/echidna
      dockerfile: Dockerfile.prod
    container_name: chainguard-echidna-prod
    environment:
      - MAX_EXECUTION_TIME=1800
      - MAX_MEMORY=2g
    volumes:
      - ./uploads:/workspace:ro
    networks:
      - chainguard-network
    profiles:
      - security-tools
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  foundry:
    build:
      context: ./ai/security_tools/foundry
      dockerfile: Dockerfile.prod
    container_name: chainguard-foundry-prod
    environment:
      - MAX_EXECUTION_TIME=900
      - MAX_MEMORY=1g
    volumes:
      - ./uploads:/workspace:ro
    networks:
      - chainguard-network
    profiles:
      - security-tools
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Monitoring (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: chainguard-prometheus-prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - chainguard-network
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true
    read_only: true

  grafana:
    image: grafana/grafana:latest
    container_name: chainguard-grafana-prod
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=${GRAFANA_URL}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - chainguard-network
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  chainguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
